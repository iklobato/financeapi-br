# Generated by Django 4.2.21 on 2025-05-26 02:17

from decimal import Decimal
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ExchangeRate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True, unique=True)),
                (
                    "rate",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                ("source", models.CharField(default="bcb", max_length=20)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "financial_api_exchange_rate",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="MarketCorrelation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True, unique=True)),
                (
                    "correlation_30d",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("-1.0")),
                            django.core.validators.MaxValueValidator(Decimal("1.0")),
                        ],
                    ),
                ),
                (
                    "correlation_7d",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("-1.0")),
                            django.core.validators.MaxValueValidator(Decimal("1.0")),
                        ],
                    ),
                ),
                (
                    "sp500_return",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Daily return percentage",
                        max_digits=6,
                    ),
                ),
                (
                    "ibovespa_return",
                    models.DecimalField(
                        decimal_places=4,
                        help_text="Daily return percentage",
                        max_digits=6,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "financial_api_market_correlation",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "plan",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("pro", "Pro"),
                            ("premium", "Premium"),
                        ],
                        default="free",
                        max_length=10,
                    ),
                ),
                ("api_key", models.CharField(blank=True, max_length=64, unique=True)),
                ("daily_requests", models.IntegerField(default=0)),
                (
                    "last_request_reset",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "whatsapp_number",
                    models.CharField(
                        blank=True,
                        help_text="WhatsApp number in international format (e.g., +5511999999999)",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="financial_api_users",
                        related_query_name="financial_api_user",
                        to="auth.group",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="financial_api_users",
                        related_query_name="financial_api_user",
                        to="auth.permission",
                    ),
                ),
            ],
            options={
                "db_table": "financial_api_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ADRQuote",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ticker", models.CharField(db_index=True, max_length=10)),
                (
                    "price_usd",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "price_brl",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                ("volume", models.BigIntegerField(default=0)),
                (
                    "change_percent_day",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=6, null=True
                    ),
                ),
                ("timestamp", models.DateTimeField(db_index=True)),
                ("source", models.CharField(default="polygon", max_length=20)),
                ("delay_minutes", models.IntegerField(default=15)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "financial_api_adr_quote",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["ticker", "timestamp"],
                        name="financial_a_ticker_60eb1e_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="financial_a_timesta_eee299_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Transaction",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("ticker", models.CharField(max_length=10)),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[("buy", "Buy"), ("sell", "Sell")], max_length=4
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0001"))
                        ],
                    ),
                ),
                (
                    "price_usd",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                (
                    "exchange_rate",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=8,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                ("date", models.DateField()),
                (
                    "brokerage_fee",
                    models.DecimalField(
                        decimal_places=2, default=Decimal("0.00"), max_digits=8
                    ),
                ),
                ("encrypted_data", models.TextField(blank=True)),
                ("is_day_trade", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="financial_api.user",
                    ),
                ),
            ],
            options={
                "db_table": "financial_api_transaction",
                "ordering": ["-date", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "date"], name="financial_a_user_id_e61def_idx"
                    ),
                    models.Index(
                        fields=["ticker", "date"], name="financial_a_ticker_e2857c_idx"
                    ),
                    models.Index(
                        fields=["user", "ticker", "date"],
                        name="financial_a_user_id_f53e15_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PriceAlert",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("ticker", models.CharField(max_length=10)),
                (
                    "condition_type",
                    models.CharField(
                        choices=[
                            ("above", "Above"),
                            ("below", "Below"),
                            ("change_percent", "Change Percent"),
                        ],
                        max_length=15,
                    ),
                ),
                ("target_value", models.DecimalField(decimal_places=4, max_digits=10)),
                (
                    "notification_channel",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("whatsapp", "WhatsApp"),
                            ("webhook", "Webhook"),
                        ],
                        max_length=10,
                    ),
                ),
                ("webhook_url", models.URLField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("triggered_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="price_alerts",
                        to="financial_api.user",
                    ),
                ),
            ],
            options={
                "db_table": "financial_api_price_alert",
                "indexes": [
                    models.Index(
                        fields=["user", "is_active"],
                        name="financial_a_user_id_ba50ee_idx",
                    ),
                    models.Index(
                        fields=["ticker", "is_active"],
                        name="financial_a_ticker_8458e0_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Portfolio",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("ticker", models.CharField(max_length=10)),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=12,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.0001"))
                        ],
                    ),
                ),
                (
                    "average_price_usd",
                    models.DecimalField(
                        decimal_places=4,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="portfolio",
                        to="financial_api.user",
                    ),
                ),
            ],
            options={
                "db_table": "financial_api_portfolio",
                "indexes": [
                    models.Index(
                        fields=["user", "ticker"], name="financial_a_user_id_a68019_idx"
                    )
                ],
                "unique_together": {("user", "ticker")},
            },
        ),
        migrations.CreateModel(
            name="APIUsageLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("endpoint", models.CharField(max_length=100)),
                ("method", models.CharField(max_length=10)),
                ("status_code", models.IntegerField()),
                ("response_time_ms", models.IntegerField()),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_logs",
                        to="financial_api.user",
                    ),
                ),
            ],
            options={
                "db_table": "financial_api_usage_log",
                "indexes": [
                    models.Index(
                        fields=["user", "timestamp"],
                        name="financial_a_user_id_4f8dc4_idx",
                    ),
                    models.Index(
                        fields=["endpoint", "timestamp"],
                        name="financial_a_endpoin_049cd2_idx",
                    ),
                ],
            },
        ),
    ]
